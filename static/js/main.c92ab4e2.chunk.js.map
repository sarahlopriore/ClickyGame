{"version":3,"sources":["components/Header/Header.js","components/Container/Container.js","components/Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","guessResult","score","highScore","Container","children","Card","onClick","id","alt","name","src","image","App","state","images","lightning","clicked","updateScore","newScore","_this","setState","handleImageClick","newLightning","Shuffle","console","log","imageClicked","includes","push","_this2","this","components_Container_Container","components_Header_Header","map","bolt","components_Card_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qgCAYeA,SATA,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,eACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,iFACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeJ,EAAMK,aACnCJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,UAA8BJ,EAAMM,MAApC,kBAA0DN,EAAMO,cCAzDC,EANG,SAAAR,GAAK,OACvBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACVJ,EAAMS,WCOIC,SARF,SAAAV,GAAK,OACdC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKQ,QAAS,kBAAMX,EAAMW,QAAQX,EAAMY,KAAKA,GAAIZ,EAAMY,GAAIC,IAAKb,EAAMc,KAAMC,IAAKf,EAAMgB,mBCiEpFC,oNA9DbC,MAAQ,CACNC,OAAQC,EACRd,MAAO,EACPC,UAAW,EACXc,QAAS,GACThB,YAAa,MAGfiB,YAAc,SAAAV,GACZ,IAAMW,EAAWC,EAAKN,MAAMZ,MAAQ,EACpCkB,EAAKC,SAAS,CAAEnB,MAAOiB,IACnBA,EAAWC,EAAKN,MAAMX,WACxBiB,EAAKC,SAAS,CAAElB,UAAYgB,OAIhCG,iBAAmB,SAAAd,GACjB,IAAIe,EAAeC,IAAQR,GAC3BS,QAAQC,IAAIH,GACZH,EAAKC,SAAS,CAAEN,OAAQQ,IAExB,IAAII,EAAeP,EAAKN,MAAMG,QAC9BQ,QAAQC,IAAIC,GAEPP,EAAKN,MAAMG,QAAQW,SAASpB,GAU/BY,EAAKC,SAAS,CACZnB,MAAO,EACPD,YAAa,qBACbgB,QAAS,MAZXU,EAAaE,KAAKrB,GAElBY,EAAKF,cAELE,EAAKC,SAAS,CACZpB,YAAa,qBACbgB,QAASU,8EAYN,IAAAG,EAAAC,KACP,OACElC,EAAAC,EAAAC,cAACiC,EAAD,KACEnC,EAAAC,EAAAC,cAACkC,EAAD,CAAQ/B,MAAO6B,KAAKjB,MAAMZ,MAAOC,UAAW4B,KAAKjB,MAAMX,UAAWF,YAAa8B,KAAKjB,MAAMb,cACzF8B,KAAKjB,MAAMC,OAAOmB,IAAI,SAAAC,GAAI,OACzBtC,EAAAC,EAAAC,cAACqC,EAAD,CACA5B,GAAI2B,EAAK3B,GACT6B,IAAKF,EAAK3B,GACVE,KAAMyB,EAAKzB,KACXE,MAAOuB,EAAKvB,MACZL,QAASuB,EAAKR,iBACdtB,UAAU,wBAvDFsC,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c92ab4e2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = props => (\r\n    <div className=\"header bg-secondary\">\r\n        <h1 className=\"title\">Clicky Game</h1>\r\n        <div className=\"lead\">Click on an image to earn points, but don't click on an image more than once.</div>\r\n        <h3 className=\"guessResult\">{props.guessResult}</h3>\r\n        <h3 className=\"score\">Score: {props.score} | High Score: {props.highScore}</h3>\r\n    </div>\r\n)\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nconst Container = props => (\r\n<div className=\"container-fluid\">\r\n    {props.children}\r\n</div>\r\n)\r\n\r\nexport default Container;","import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = props => (\r\n    <div className=\"card\">\r\n        <div className=\"img-container\">\r\n            <img onClick={() => props.onClick(props.id)} id={props.id} alt={props.name} src={props.image} />\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default Card;","import React, { Component } from 'react';\nimport Shuffle from 'shuffle-array';\nimport Header from \"./components/Header/Header.js\";\nimport Container from \"./components/Container/Container.js\";\nimport Card from \"./components/Card/Card.js\"\nimport lightning from \"./lightning.json\"\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    images: lightning,\n    score: 0,\n    highScore: 0,\n    clicked: [],\n    guessResult: \"\"\n  }\n\n  updateScore = id => {\n    const newScore = this.state.score + 1;\n    this.setState({ score: newScore })\n    if (newScore > this.state.highScore) {\n      this.setState({ highScore : newScore })\n    }\n  }\n\n  handleImageClick = id => {\n    let newLightning = Shuffle(lightning);\n    console.log(newLightning)\n    this.setState({ images: newLightning })\n\n    let imageClicked = this.state.clicked\n    console.log(imageClicked)\n\n    if (!this.state.clicked.includes(id)) {\n      imageClicked.push(id)\n\n      this.updateScore()\n\n      this.setState({ \n        guessResult: \"You guessed right!\",\n        clicked: imageClicked\n      })\n    } else {\n      this.setState({\n        score: 0,\n        guessResult: \"You guessed WRONG!\",\n        clicked: []\n      })\n    }\n  }\n\n\n  render() {\n    return (\n      <Container>\n        <Header score={this.state.score} highScore={this.state.highScore} guessResult={this.state.guessResult} />\n        {this.state.images.map(bolt => (\n          <Card \n          id={bolt.id}\n          key={bolt.id}\n          name={bolt.name}\n          image={bolt.image}\n          onClick={this.handleImageClick}\n          className=\"eachImage\"\n          />\n        ))}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}